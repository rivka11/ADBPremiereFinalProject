/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SalesRep;

import utilityClasses.UtilityClass;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author me
 */
public class AddOrderGeneratedPanel extends javax.swing.JPanel {

    private final Connection dbConnection;

    /**
     * Creates new form AddOrderGeneratedPanel
     */
    public AddOrderGeneratedPanel(Connection dbConn)
      {
        this.dbConnection = dbConn;
        initComponents();
      }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        datetxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        custNumCombo = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        orderTable.addKeyListener(new KeyListener()
        {
            @Override
            public void keyTyped(KeyEvent e)
            {
            }
            @Override
            public void keyPressed(KeyEvent e)
            {
                if (e.getKeyCode() == KeyEvent.VK_ENTER)
                {
                    ((DefaultTableModel) orderTable.getModel()).addRow(new Object[]{null, null, null});
                }
            }
            @Override
            public void keyReleased(KeyEvent e)
            {
            }
        });
        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null}

            },
            new String []
            {
                "Part Num", "Quantity", "Quoted Price"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class

                , java.lang.Integer.class

                , java.lang.Double.class

            };
            boolean[] canEdit = new boolean []
            {
                true, true, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        orderTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(orderTable);

        jLabel1.setText("Date");

        datetxt.setText(LocalDate.now().toString());

        jLabel2.setText("customer number");

        custNumCombo.setModel(new DefaultComboBoxModel(getCustNums()));

        jButton1.setText("Add order");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(142, 142, 142)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(107, 107, 107)
                                .addComponent(jLabel2)))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(datetxt)
                            .addComponent(custNumCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(custNumCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(176, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        orderTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        if (getCustNums().length == 0) {
            JOptionPane.showMessageDialog(null, "This sales rep has no customners");
            return;
        }
        int rows = orderTable.getModel().getRowCount();
        int cols = orderTable.getModel().getColumnCount();//3
        System.out.println(cols);
        DefaultTableModel table = (DefaultTableModel) orderTable.getModel();
        for (int i = 0; i < rows; i++) {
            String part = (String) table.getValueAt(i, 0);
            Integer qty = (Integer) table.getValueAt(i, 1);
            Double price = (Double) table.getValueAt(i, 2);

            if (UtilityClass.checkNull(part, qty, price)) {
                continue;
            }

            if (UtilityClass.checkEmpty(part, qty.toString(), price.toString())) {
                JOptionPane.showMessageDialog(null, "part, quantity and price must be completed");
            }

            CallableStatement cs = null;

            try {
                cs = dbConnection.prepareCall(
                        "{call dbo.placeOrder(?, ?, ?, ?, ?, ?)}"
                );

                cs.setInt(1, getNextID());
                cs.setString(2, part);
                cs.setInt(3, qty);
                cs.setDouble(4, price);
                cs.setDate(5, Date.valueOf(datetxt.getText()));
                cs.setInt(6, (Integer) custNumCombo.getSelectedItem());

                cs.execute();

               
                dbConnection.commit();
                JOptionPane.showMessageDialog(null, "order added");
          cs.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
                try {
                    dbConnection.rollback();
                } catch (SQLException ex1) {
                    ex1.printStackTrace();
                    return;
                }
            }

        }


    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> custNumCombo;
    private javax.swing.JTextField datetxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable orderTable;
    // End of variables declaration//GEN-END:variables

    private Integer[] getCustNums()
      {
        ArrayList<Integer> nums = new ArrayList<>();
        Integer[] numsReturn = null;//= (Integer[]) nums.toArray();

        try {
            String query = "select distinct cust_Num from viewallCustomerOrders";
            Statement s = dbConnection.createStatement();
            ResultSet rs = s.executeQuery(query);

            while (rs.next()) {
                nums.add(rs.getInt("cust_num"));
            }

            numsReturn = new Integer[nums.size()];

            for (int i = 0; i < numsReturn.length; i++) {
                numsReturn[i] = nums.get(i);
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return numsReturn;
      }

    private int getNextID()
      {
        Statement s;
        try {
            s = dbConnection.createStatement();
            ResultSet rs = s.executeQuery("select maxNum from getNextOrderNum");
            while (rs.next()) {
                return rs.getInt("maxNum") + 1;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        throw new RuntimeException();
      }
}
