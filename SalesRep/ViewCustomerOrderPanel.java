/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SalesRep;

import utilityClasses.ResultsTableModel;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author me
 */
public class ViewCustomerOrderPanel extends JPanel {

    private Connection dbConnection;
    private ResultsTableModel tableModel;

    /**
     * Creates new form ViewCustomerOrderPanel
     */
    public ViewCustomerOrderPanel(Connection dbConnection)
      {
        this.dbConnection = dbConnection;
        initComponents();
        this.setLayout(new GridLayout(2, 4));
        setVisible(true);

      }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents()
      {

        infolbl = new javax.swing.JLabel();
        chooseCustomerCombo = new javax.swing.JComboBox<>();
        chooseCustomerCombo.setToolTipText("choose customer");
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();

        chooseCustomerCombo.setModel(new DefaultComboBoxModel(getCustNames()));
        chooseCustomerCombo.setSize(100, 100);
        chooseCustomerCombo.setPreferredSize(getSize());
        //assume no duplicate names
        if (chooseCustomerCombo.getItemCount() == 0) {
            infolbl.setText("there are no customers to display");
            this.add(infolbl);
            System.out.print("no customers");
        } else {
            chooseCustomerCombo.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt)
                  {
                    chooseCustomerComboItemStateChanged(evt);
                  }
            });

            //instantiate the model which will automatically fire off the
            //execution of the query in String, query.
            try {
                String query = "select * from viewallCustomerOrders where cust_num  = "
                        + Integer.parseInt(chooseCustomerCombo.getSelectedItem().toString());
                tableModel = new ResultsTableModel(this.dbConnection, query);

                //create JTable based on the tableModel
                //the table holds the data that will be displayed on the screen
                resultTable = new JTable(tableModel);
                resultTable.setModel(tableModel);
                jScrollPane1.setViewportView(resultTable);

                this.add(chooseCustomerCombo);
                this.add(jScrollPane1);

            } catch (SQLException sql) {
                sql.printStackTrace();
            }

        }
      }// </editor-fold>                        

    private void chooseCustomerComboItemStateChanged(java.awt.event.ItemEvent evt)
      {
        try {
            // PreparedStatement st= dbConnection.prepareStatement("select * from viewCustomerOrders where cust_num = ?");
            //     st.setInt(1, Integer.parseInt(chooseCustomerCombo.getSelectedItem().toString
            //I use String so that I can use resultTableModel class, also it is parsed as int so will throw exception of bad data
            //TODO make new class to accept prepared statement
            String query = "select * from viewCustomerOrders where cust_num where cust_Num = "
                    + Integer.parseInt(chooseCustomerCombo.getSelectedItem().toString());

            tableModel = new ResultsTableModel(this.dbConnection, query);

            //create JTable based on the tableModel
            //the table holds the data that will be displayed on the screen
            resultTable = new JTable(tableModel);
//                resultTable.addMouseListener(new MouseAdapter() {
//                    @Override
//                    public void mousePressed(MouseEvent me)
//                      {
//                        JTable table = (JTable) me.getSource();
//                        Point p = me.getPoint();
//                        int row = table.rowAtPoint(p);
//
//                        if (me.getClickCount() == 2) {
//                            System.out.println("hit it");
//                            int selectedrow = table.getSelectedRow();
//                            int empid = Integer.valueOf(table.getModel().getValueAt(selectedrow, 0).toString());
//
//                            new ModifyEmployeeFromListOfEmpsOfficeRole(dbConnection, empid);
//                        }
//
//                      }
//                });

            //place components in the window
            //place table in a scrollpane so that user can scroll through the 
            //contents of the table
            this.add(new JScrollPane(resultTable), BorderLayout.CENTER);

            //adding a row sorter will allow the user to click on any column heading
            //in order to resort the rows by the data in that column
            final TableRowSorter<TableModel> sorter
                    = new TableRowSorter<TableModel>(tableModel);
            resultTable.setRowSorter(sorter);

            //set window size and make it and its components visible on the screen
            // setSize(500, 250);
            //   setVisible(true);
        } catch (NumberFormatException o) {
            JOptionPane.showMessageDialog(null, "Invalid customer number");
            return;
        } catch (SQLException sqlException) {
            JOptionPane.showMessageDialog(null, sqlException.getMessage());

        } finally {
            tableModel.disconnectFromDatabase();
        }
      }

    // Variables declaration - do not modify                     
    private javax.swing.JComboBox<String> chooseCustomerCombo;
    private javax.swing.JLabel infolbl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable resultTable;
    // End of variables declaration                   

    private Integer[] getCustNames()
      {
        ArrayList<Integer> nums = new ArrayList<>();
        Integer[] numsReturn = null;//= (Integer[]) nums.toArray();
        String query = "select distinct cust_Num from viewallcustomerorders";
        try (Statement s = this.dbConnection.createStatement()) {

            try (ResultSet rs = s.executeQuery(query)) {

                while (rs.next()) {
                    nums.add(rs.getInt("cust_Num"));
                }

                numsReturn = new Integer[nums.size()];

                for (int i = 0; i < numsReturn.length; i++) {
                    numsReturn[i] = nums.get(i);
                }

            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return numsReturn;
      }
}
